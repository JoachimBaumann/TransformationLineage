name: Build and Package Transformations

on:
  push:
    paths:
      - 'transformations/**'
  workflow_dispatch:
    inputs:
      transformation:
        description: 'Name of the transformation to build'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Determine which transformation(s) to build
        id: detect
        run: |
          set -e
          echo "Event: ${{ github.event_name }}"
          echo "Before SHA: ${{ github.event.before }}"
          echo "Current SHA: ${{ github.sha }}"

          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.transformation }}" ]; then
            echo "manual_input=${{ github.event.inputs.transformation }}" >> $GITHUB_OUTPUT
          else
            base_ref="${{ github.event.before }}"
            [ -z "$base_ref" ] && base_ref="HEAD~1"
            echo "Using base ref: $base_ref"

            echo "Changed files:"
            git diff --name-status "$base_ref" "${{ github.sha }}"

            changed=$(git diff --name-status "$base_ref" "${{ github.sha }}" \
              | grep -E '^(A|M|R)' \
              | awk '{print $2}' \
              | grep '^transformations/' \
              | cut -d/ -f2 \
              | sort -u \
              | xargs)

            echo "Detected changed dirs: $changed"
            echo "auto_detected=$changed" >> $GITHUB_OUTPUT
          fi

      - name: Build selected or changed transformations
        run: |
          set -e
          mkdir -p packagedTransformations

          if [ -n "${{ steps.detect.outputs.manual_input }}" ]; then
            dirs="${{ steps.detect.outputs.manual_input }}"
          elif [ -n "${{ steps.detect.outputs.auto_detected }}" ]; then
            dirs="${{ steps.detect.outputs.auto_detected }}"
          else
            echo "No transformations to build."
            exit 0
          fi

          sha=$(git rev-parse --short HEAD)

          for dir in $dirs; do
            pom_path="transformations/$dir/pom.xml"
            if [ -f "$pom_path" ]; then
              echo "Preparing $dir"
              mkdir -p "transformations/$dir/src/main/resources"

              txt_file="transformations/$dir.txt"
              echo "git.commit.id=$sha" > "$txt_file"
              cp "$txt_file" "packagedTransformations/$dir.txt"

              echo "Building $dir"
              mvn -f "$pom_path" clean package

              jar_path=$(find "transformations/$dir/target" -type f -name "*.jar" ! -name "original-*.jar" | head -n 1)
              if [ -n "$jar_path" ]; then
                cp "$jar_path" "packagedTransformations/$dir.jar"
              else
                echo "No JAR found for $dir"
              fi

            else
              echo "Skipping $dir â€” no pom.xml"
            fi
          done

      - name: List packaged files
        run: ls -lh packagedTransformations

      - name: Debug files
        run: |
          echo "Listing .txt files:"
          ls -l transformations/*.txt || true

          echo "Git status:"
          git status

      - name: Commit built JARs and SHA info to the repo
        run: |
          name="${{ github.event.pusher.name }}"
          email="${{ github.event.pusher.email }}"
          [ -z "$name" ] && name="github-actions"
          [ -z "$email" ] && email="github-actions@github.com"

          git config user.name "$name"
          git config user.email "$email"

          git fetch origin
          branch=$(echo "${GITHUB_REF#refs/heads/}")
          git checkout "$branch"
          git pull origin "$branch"

          git add packagedTransformations/
          git add -f transformations/*.txt || true

          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Add built JARs and SHA info by ${{ github.actor }}"
            git push origin "$branch"
          fi

      - id: auth
        uses: go
